{%- macro to_java_return_type(type) -%}
  {%- if type == "string" -%}
    String
  {%- elif type == "string[]" -%}
    List<String>
  {%- elif type == "boolean" -%}
    boolean
  {%- elif type == "int" -%}
    long
  {%- elif type == "double" -%}
    double
  {%- else -%}
    {{type}}
  {%- endif -%}
{%- endmacro %}
{%- macro to_java_key_type(type) -%}
  {%- if type == "string" -%}
    stringKey
  {%- elif type == "string[]" -%}
    stringArrayKey
  {%- elif type == "boolean" -%}
    booleanKey
  {%- elif type == "int" -%}
    longKey
  {%- elif type == "double" -%}
    doubleKey
  {%- else -%}
    {{ type | to_camelcase(False)}}Key
  {%- endif -%}
{%- endmacro %}
{%- macro to_java_instrument_builder_factory(instrument) -%}
  {%- if instrument == "counter" -%}
    counterBuilder
  {%- elif instrument == "histogram" -%}
    histogramBuilder
  {%- elif instrument == "updowncounter" -%}
    upDownCounterBuilder
  {%- elif instrument == "gauge" -%}
    gaugeBuilder
  {%- endif -%}
{%- endmacro %}
{%- macro to_java_instrument_builder_type(instrument) -%}
  {%- if instrument == "counter" -%}
    LongCounterBuilder
  {%- elif instrument == "histogram" -%}
    DoubleHistogramBuilder
  {%- elif instrument == "updowncounter" -%}
    LongUpDownCounterBuilder
  {%- elif instrument == "gauge" -%}
    DoubleGaugeBuilder
  {%- endif -%}
{%- endmacro %}
package io.opentelemetry.instrumentation.api.semconv;

import io.opentelemetry.api.metrics.Meter;

class {{ root_namespace | to_camelcase(True) }} {
{%- for attribute in attributes_and_templates %}

  /**
  * {{attribute.brief | render_markdown(code="{{@code {0}}}", paragraph="{0}")}}
  */
  public static final AttributeKey<{{ to_java_return_type(attribute.instantiated_type | string) | first_up }}> {{attribute.fqn | to_const_name}} = {{to_java_key_type(attribute.instantiated_type | string)}}("{{attribute.fqn}}");
{% endfor %}
{%- for metric in metrics %}
  /**
  * {{metric.brief | to_doc_brief}}
  * Experimental: {{ metric | is_experimental }}
  */
  public static final {{ to_java_instrument_builder_type(metric.instrument) }} create{{metric.metric_name | to_camelcase(True)}}(Meter meter) {
    return meter.{{to_java_instrument_builder_factory(metric.instrument)}}("{{ metric.metric_name }}")
            .setDescription("{{ metric.brief }}")
            .setUnit("{{ metric.unit }}");
  }
{% endfor %}
}