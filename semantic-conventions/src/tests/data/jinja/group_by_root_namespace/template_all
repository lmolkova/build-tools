{%- macro to_java_return_type(type) -%}
  {%- if type == "string" -%}
    String
  {%- elif type == "string[]" -%}
    List<String>
  {%- elif type == "boolean" -%}
    boolean
  {%- elif type == "int" -%}
    long
  {%- elif type == "double" -%}
    double
  {%- else -%}
    {{type}}
  {%- endif -%}
{%- endmacro %}
{%- macro to_java_key_type(type) -%}
  {%- if type == "string" -%}
    stringKey
  {%- elif type == "string[]" -%}
    stringArrayKey
  {%- elif type == "boolean" -%}
    booleanKey
  {%- elif type == "int" -%}
    longKey
  {%- elif type == "double" -%}
    doubleKey
  {%- else -%}
    {{ type | to_camelcase(False)}}Key
  {%- endif -%}
{%- endmacro %}
package io.opentelemetry.instrumentation.api.semconv;

class {{ root_namespace | to_camelcase(True) }}Attributes {
{%- for attribute in attributes_and_templates %}

  /**
  * {{attribute.brief | render_markdown(code="{{@code {0}}}", paragraph="{0}")}}
  */
  {% if attribute | is_template %}
  public static final AttributeKeyTemplate<{{ to_java_return_type(attribute.instantiated_type | string) | first_up}}> {{attribute.fqn | to_const_name}} = {{to_java_key_type(attribute.instantiated_type | string)}}("{{attribute.fqn}}");
  {% else %}
  public static final AttributeKey<{{ to_java_return_type(attribute.instantiated_type | string) | first_up }}> {{attribute.fqn | to_const_name}} = {{to_java_key_type(attribute.instantiated_type | string)}}("{{attribute.fqn}}");
  {% endif %}
{% endfor %}

{%- for attribute in enum_attributes %}
  {% set type = to_java_return_type(attribute.attr_type.enum_type) %}
  public static final class {{attribute.fqn | to_camelcase(True) ~ "Values"}} {
    {% for member in attribute.attr_type.members %}
      /** {{member.brief | to_doc_brief}}.*/
      {% set value = attribute | print_member_value(member) %}
      public static final {{ type }} {{ member.member_id | to_const_name }} = {{ value }};
    {% endfor %}
  }

{% endfor %}
}
