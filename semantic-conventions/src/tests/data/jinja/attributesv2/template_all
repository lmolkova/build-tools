{%- macro to_java_return_type(type) -%}
  {%- if type == "string" -%}
    String
  {%- elif type == "string[]" -%}
    List<String>
  {%- elif type == "boolean" -%}
    boolean
  {%- elif type == "int" -%}
    long
  {%- elif type == "double" -%}
    double
  {%- else -%}
    {{type}}
  {%- endif -%}
{%- endmacro %}
{%- macro to_java_key_type(type) -%}
  {%- if type == "string" -%}
    stringKey
  {%- elif type == "string[]" -%}
    stringArrayKey
  {%- elif type == "boolean" -%}
    booleanKey
  {%- elif type == "int" -%}
    longKey
  {%- elif type == "double" -%}
    doubleKey
  {%- else -%}
    {{ type | to_camelcase(False)}}Key
  {%- endif -%}
{%- endmacro %}
package io.opentelemetry.instrumentation.api.semconv;

class {{ group | to_camelcase(True) }}Attributes {
{%- for attribute in attributes %}

  /**
  * {{attribute.brief | render_markdown(code="{{@code {0}}}", paragraph="{0}")}}
  */
  public static final AttributeKey<{{ to_java_return_type(attribute.instantiated_type | string) | to_camelcase(True) }}> {{attribute.fqn | to_const_name}} = {{to_java_key_type(attribute.instantiated_type | string)}}("{{attribute.fqn}}");
{# Extra line #}
{%- endfor %}
{%- for attribute_template in attribute_templates %}

  /**
  * {{attribute_template.brief | render_markdown(code="{{@code {0}}}", paragraph="{0}")}}
  */
  public static final AttributeKey<{{ to_java_return_type(attribute_template.instantiated_type | string) | to_camelcase(True)}}> {{attribute_template.fqn | to_const_name}} = {{to_java_key_type(attribute_template.instantiated_type | string)}}("{{attribute_template.fqn}}");
{# Extra line #}
{%- endfor %}
}